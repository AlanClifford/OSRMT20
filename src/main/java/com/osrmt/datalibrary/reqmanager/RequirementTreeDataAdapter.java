package com.osrmt.datalibrary.reqmanager;

import java.sql.*;
import java.util.*;

import com.osframework.modellibrary.common.DbCalendar;
import com.osframework.modellibrary.reference.group.ComponentTypeFramework;
import com.osframework.modellibrary.reference.group.SystemMessageFramework;
import com.osrmt.modellibrary.reference.group.*;
import com.osrmt.modellibrary.reqmanager.*;
import com.osframework.datalibrary.common.*;
import com.osframework.ejb.reference.common.IReferenceMap;
import com.osframework.ejb.reference.security.ISecurity;
import com.osframework.framework.logging.Debug;

/**
 * The ReferenceTree model is a domain object which stores lookup table id which have a parent/child
 * relationship such as locations, security etc.   The reference id maps to a row in the Reference table,
 * this table defines the relationship. Example the reference table may have
 *   id  Group       Display 
 *    8  Workflow    Discharge patient
 *    9  Workflow    Register patient
 *   10      Task    Modify patient
 *   11      Task    Add patient      
 * In the referencetree table we define that the modifypatient task is related to
 * both Discharge and Register
 *   ref id      parent ref id
 *       10                  8
 *       10                  9
 *       
 * The ReferenceTreeDataModel is auto generated by generator.GenerateModel.getModelSource()
 * and is subclassed by ReferenceTreeModel generated once by GenerateModel.getExtendedModelSouce().
 * Any business logic should be added to ReferenceTreeModel.  The ReferenceTreeList is a collection
 * of ReferenceTreeModels and is auto generated by GenerateModel.getListSource.  How the list stores
 * the models depends on the parameters defined in osrmt_schem.mdb ModelLibrary.
*/
public class RequirementTreeDataAdapter extends RequirementTreeDbAdapter{ 
	
	public RequirementTreeDataAdapter(IReferenceMap reference, ISecurity security) {
		super(reference, security);
	}	
	
	public RequirementTreeModel getRelationship(int childId, int parentId, RelationGroup relation) throws Exception {
		String sql = "select * from requirement_tree"
			+ " where child_id = ? and parent_id = ? and relation_ref_id = ? and active_ind = 1";
		RequirementTreeList list = getRequirementTree(sql, Db.getParameter(childId, parentId, relation.getRelationRefId()));
		if (list.size() ==0 ) {
			return new RequirementTreeModel();
		} else if (list.size() > 1) {
			Debug.LogError(this, SystemMessageFramework.MULTIPLEVALUESFOUND + ": "+ childId + ", " + parentId + ", " + relation.getRelationRefId());
			return list.getFirst();
		} else {
			return list.getFirst();
		}
	}

	public void removeInactiveRelationships(DbConnection conn) throws Exception {
		String sql = "delete from requirement_tree where  active_ind = 0 ";
		Db.getAccess().executeUpdate(sql, conn);
	}
	
	/**
	 * Update the tree changing childs of oldParentId to be newParentId
	 * 
	 * @param newParentId
	 * @param oldParentId
	 * @param tableRefId
	 */
	public void inactivateRelationships(int id, int tableRefId, DbConnection conn) throws Exception {
		String sql = "update requirement_tree set active_ind = 0"
			+ " where child_id = ?"
			+ " and child_artifact_ref_id = ?";
		Vector params = new Vector(2);
		params.add(new Integer(id));
		params.add(new Integer(tableRefId));
		Db.getAccess().executeUpdate(sql, params);
		
		sql = "update requirement_tree set active_ind = 0"
			+ " where parent_id = ?"
			+ " and parent_artifact_ref_id = ?";
		params = new Vector(2);
		params.add(new Integer(id));
		params.add(new Integer(tableRefId));
		Db.getAccess().executeUpdate(sql, params);
	}
	
	
	/**
	 * Update the tree changing childs of oldParentId to be newParentId
	 * 
	 * @param newParentId
	 * @param oldParentId
	 * @param tableRefId
	 */
	public UpdateResult deleteRelationship(RequirementTreeModel rtm) throws Exception {
		SQLResult result = null;
		try {
			String sql = "delete from requirement_tree"
				+ " where child_id = ?"
				+ " and child_artifact_ref_id = ?"
				+ " and parent_id = ?"
				+ " and parent_artifact_ref_id = ?";
			Vector params = new Vector(4);
			params.add(new Integer(rtm.getChildId()));
			params.add(new Integer(rtm.getChildArtifactRefId()));
			params.add(new Integer(rtm.getParentId()));
			params.add(new Integer(rtm.getParentArtifactRefId()));
			result = Db.getAccess().executeUpdate(sql, params);
			return new UpdateResult(result.getRowsUpdated(),0);
		} catch (Exception e) {
			throw e;
		} finally {
			if (result != null) {
				result.close();
			}
		}
		
		
	}
	
	/**
	 * Update the tree changing childs of oldParentId to be newParentId
	 * 
	 * @param newParentId
	 * @param oldParentId
	 * @param tableRefId
	 */
	public void setNewParent(int newParentId, int oldParentId, int tableRefId) throws Exception {
		String sql = "update requirement_tree set parent_id = ?,"
			+ " update_count = update_count+1,"
			+ " update_dt = ?"
			+ " where child_id = ?"
			+ " and child_artifact_ref_id = ?"
			+ " and parent_artifact_ref_id = ?"
			+ " and relation_ref_id = ?";
		Vector params = new Vector();
		params.add(new Integer(newParentId));
		params.add(DbCalendar.getDbCalendar());
		params.add(new Integer(oldParentId));
		params.add(new Integer(tableRefId));
		params.add(new Integer(tableRefId));
		params.add(new Integer(RelationGroup.RELATED));
		Db.getAccess().executeUpdate(sql, params);
	}
	
	public RequirementTreeModel getParent (int childArtifactRefId, int childId) throws DataAccessException {
		String sql = "select * from requirement_tree "
			+ " where parent_artifact_ref_id = ?"
			+ " and child_artifact_ref_id = ?"
			+ " and child_id = ?"
			+ " and relation_ref_id = ?";
		Vector params = new Vector();
		params.add(new Integer(childArtifactRefId));
		params.add(new Integer(childArtifactRefId));
		params.add(new Integer(childId));
		params.add(new Integer(RelationGroup.RELATED));
		RequirementTreeList list = this.getRequirementTree(sql, params);
		if (list.size()==1) {
			Enumeration e1 = list.elements();
			return (RequirementTreeModel) e1.nextElement();
		} else {
			return new RequirementTreeModel();
		}
	}	

	public RequirementTreeList getChildren (int parentArtifactRefId, int parentId, RelationGroup relation, boolean sameType, DbConnection conn) throws DataAccessException {
		return this.getRequirementTree(getChildrenQuery(parentArtifactRefId, parentId, relation, sameType), getChildrenParams(parentArtifactRefId, parentId, relation, sameType), conn);
	}

	public RequirementTreeList getChildren (int parentArtifactRefId, int parentId, RelationGroup relation, boolean sameType) throws DataAccessException {
		return this.getRequirementTree(getChildrenQuery(parentArtifactRefId, parentId, relation, sameType), getChildrenParams(parentArtifactRefId, parentId, relation, sameType));
	}

	private String getChildrenQuery (int parentArtifactRefId, int parentId, RelationGroup relation, boolean sameType) throws DataAccessException {
		String sql = "select r.* from requirement_tree r, artifact a"
			+ " where r.parent_artifact_ref_id = ?"
			+ " and r.parent_id = ?"
			+ " and r.relation_ref_id = ?"
			+ " and r.child_id = a.artifact_id"
			+ " and not a.artifact_level_ref_id = " + ArtifactLevelGroup.COMPONENT;
		if (sameType) {
			sql = sql + " and r.child_artifact_ref_id = ?";
		}
		return sql;
	}	

	private Vector getChildrenParams (int parentArtifactRefId, int parentId, RelationGroup relation, boolean sameType) throws DataAccessException {
		Vector params = new Vector();
		params.add(new Integer(parentArtifactRefId));
		params.add(new Integer(parentId));
		params.add(new Integer(relation.getRelationRefId()));
		if (sameType) {
			params.add(new Integer(parentArtifactRefId));
		}
		return params;
	}	
	
	public RequirementTreeModel getRequirementTree(int parentId, int parentArtifactRefId, RelationGroup relation, int childId, int childArtifactRefId, DbConnection conn) throws DataAccessException {
		String sql = getRequirementTreeQuery(parentId, parentArtifactRefId, relation, childId, childArtifactRefId);
		RequirementTreeList list = getRequirementTree(sql,getRequirementTreeParams(parentId, parentArtifactRefId, relation, childId, childArtifactRefId), conn);
		if (list.size()==0) {
			return new RequirementTreeModel();
		} else if (list.size() == 1) {
			Enumeration e1 = list.elements();
			return (RequirementTreeModel) e1.nextElement();
		} else {
			throw new DataAccessException("Unexpected multiple records found " + sql);
		}
	}

	public RequirementTreeModel getRequirementTree(int parentId, int parentArtifactRefId, RelationGroup relation, int childId, int childArtifactRefId) throws DataAccessException {
		String sql = getRequirementTreeQuery(parentId, parentArtifactRefId, relation, childId, childArtifactRefId);
		RequirementTreeList list = getRequirementTree(sql,getRequirementTreeParams(parentId, parentArtifactRefId, relation, childId, childArtifactRefId));
		if (list.size()==0) {
			return new RequirementTreeModel();
		} else if (list.size() == 1) {
			Enumeration e1 = list.elements();
			return (RequirementTreeModel) e1.nextElement();
		} else {
			throw new DataAccessException("Unexpected multiple records found " + sql);
		}
	}

	private String getRequirementTreeQuery (int parentId, int parentArtifactRefId, RelationGroup relation, int childId, int childArtifactRefId) throws DataAccessException {
		String sql = "select * from requirement_tree "
			+ " where parent_id = ?"
			+ " and parent_artifact_ref_id = ?"
			+ " and child_id = ?"
			+ " and child_artifact_ref_id = ?"
			+ " and relation_ref_id = ?";
		Vector params = new Vector();
		params.add(new Integer(parentId));
		params.add(new Integer(parentArtifactRefId));
		params.add(new Integer(childId));
		params.add(new Integer(childArtifactRefId));
		params.add(new Integer(relation.getRelationRefId()));
		return sql;
	}	

	private Vector getRequirementTreeParams (int parentId, int parentArtifactRefId, RelationGroup relation, int childId, int childArtifactRefId) throws DataAccessException {
		Vector params = new Vector();
		params.add(new Integer(parentId));
		params.add(new Integer(parentArtifactRefId));
		params.add(new Integer(childId));
		params.add(new Integer(childArtifactRefId));
		params.add(new Integer(relation.getRelationRefId()));
		return params;
	}	

	public RequirementTreeList getEntireTree (RelationGroup relation) throws DataAccessException {
		String sql = "select rt.* from requirement_tree rt, artifact a"
			+ " where rt.relation_ref_id = ?"
			+ "   and rt.child_id = a.artifact_id"
			+ " and not a.artifact_level_ref_id = " + ArtifactLevelGroup.COMPONENT;
		
		Vector params = new Vector();
		params.add(new Integer(relation.getRelationRefId()));
		return this.getRequirementTree(sql, params);
	}
	
	public RequirementTreeList getEntireTree () throws DataAccessException {
		String sql = "select rt.* from requirement_tree rt";
		return this.getRequirementTree(sql);
	}
	
	public RequirementTreeList getEntireTree (int productRefId) throws DataAccessException {
		String sql = "select r.* from requirement_tree r, artifact a"
			+ " where (r.parent_id = a.artifact_id and a.active_ind =1 and a.product_ref_id = " + productRefId + ")"
			+ " or (r.child_id = a.artifact_id and a.active_ind =1 and a.product_ref_id = " + productRefId + ")";
		return this.getRequirementTree(sql, new Vector());
	}	


}